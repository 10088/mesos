// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

import "mesos/mesos.proto";

import "mesos/resource_provider/resource_provider.proto";

package mesos.resource_provider.state;

option java_package = "org.apache.mesos.resource_provider.state";
option java_outer_classname = "Protos";


message ResourceProviderState {
  // This includes only pending operations. Operations that have
  // unacknowledged statuses should be recovered through the status
  // update manager.
  repeated Event.Operation operations = 1;

  // The total resources provided by this resource provider.
  repeated Resource resources = 2;

  // Used to establish the relationship between the operation and
  // the resources that the operation is operating on. Each resource
  // provider will keep a resource version UUID, and change it when
  // it believes that the resources from this resource provider are
  // out of sync from the master's view. The master will keep track
  // of the last known resource version UUID for each resource
  // provider, and attach the resource version UUID in each
  // operation it sends out. The resource provider should reject
  // operations that have a different resource version UUID than
  // that it maintains, because this means the operation is
  // operating on resources that might have already been
  // invalidated.
  required bytes resource_version_uuid = 3;
}
